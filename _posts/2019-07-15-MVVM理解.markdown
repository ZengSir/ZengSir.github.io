---
layout: post
title:  "MVC、MVVM的理解"
date:   2019-07-13 20:30:31 +0800
categories: iOS项目架构
---

### MVC、MVVM

#### 参考文章

[MVVM 模式下iOS项目目录结构详细说明](https://www.cnblogs.com/TingyunAPM/p/5549699.html)


> 所有的架构方案都是MVC的拆分

根据以上观点，首先得理解了MVC，才能去进一步分析其他的架构。每一个应用都有三个角色：数据生产者、数据加工者和数据展示者。

大部分项目都会有同样的需求，比如数据需要存取，获取数据之后需要经过（弱业务）逻辑处理变成可以直接展示出来的数据，然后根据设计UI展示给用户。用户操作产生一个事件会修改数据，数据又影响到界面。下面分析一下MVC和MVVM两种架构中，怎么划分职责。


#### MVC

MVC是一个对上面讲的功能的一个划分，主要遵循的标准是：M是数据层，V是视图层，两者不直接进行通信，而是通过V进行交互。

##### M层的职责

* 提供生成数据的接口供Controller使用
* 提供数据存取的接口供Controller使用
* 抽象业务基本组件
* 原始数据加工，生成可直接展示的数据

##### V层的职责

* 展示UI元素
* 绘制动画
* 处理逻辑无关的事件

##### C层的职责

* viewContainer生命周期管理
* 生成所有的View
* 处理业务逻辑

结构划分虽然如此，但是实际运用时候，为了方便通常会把处理数据存储，原始数据加工等功能放到了UIViewcontroller中，导致UIViewController臃肿，而原来的M层就只剩下了原始数据的表示，这就是所谓的瘦model。对应地，如果把这些功能放在M层中，那么我们就把他称为胖Model。

M臃肿或者C臃肿都不是理想的效果（解耦方面考虑），有人就提出了MVCS结构。而所谓的S层，就是把原来M层提供数据存取接口的工作单独提取出来，独立组织成一个层级--Store，这样就达到了给M层/C层减负的效果。所以，MVCS其实也一个瘦model结构。

#### MVVM

了解了MVC之后，再来看MVVM就比较简单。

iOS应用所有的视图都是通过UIViewController承载的，由于UIViewController继承自UIView，本身与View难以脱离关系。所以VC的位置就处在一个V和C之间的比较尴尬的位置。MVVM的提出让问题得到了解决。

MVVM是分为M-VM-V&VC三层的，VM用于承担原始数据重新加工的工作、以及业务逻辑，达到了为Controller或者Model减负的目的。VC也是属于V这一个层级。

根据MVC中的经典规则--“M与V不直接通信”，所以VM层也需要通过C来更新View，同时View处理事件更新M层的数据的时候也要经过C。在MVVM中，规则还是不变，只是中间层变为了VM。

iOS自带的数据传递机制入KVO,Notification等都不是特别合适做数据的双向绑定，reactCocoa（swift中对应的是RxSwift）却特别合适。reactCocoa与MVVM的关系特别密切，但并不是引入了ReactCocoa就一定是MVVM结构，MVVM的核心是VM层。

